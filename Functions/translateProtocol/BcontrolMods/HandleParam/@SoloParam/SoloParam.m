


function [s] = SoloParam(varargin)

   if nargin==1 & isa(varargin{1}, 'SoloParam'),
      s = varargin{1};
      return;
   
   else
      if iscell(varargin) & length(varargin)==1, % Is a name-value list; unpack
         varargin = varargin{1};
      end;
      
      type = []; value = [];
      pairs = { ...
        'param_owner'         ''   ;  ...
        'param_name'          ''   ;  ...
        'param_fullname'      ''   ;  ...
        'type'                ''   ;  ...
        'string'              ''   ;  ...
        'label'               ''   ;  ...
        'labelpos'            ''   ;  ...
        'labelfraction'      0.5   ;  ...
        'value'               ''   ;  ...
        'autoset_string'      ''   ;  ...
        'listpos'             []   ;  ...
        'callback_fn'         ''   ;  ...
        'position'            [10 10 150 30]   ;  ...
        'BackgroundColor'     [1 1 1]          ; ...
        'ForegroundColor'     [0 0 0]          ; ...
        'TooltipString'       ''   ;  ...
        'saveable'             1   ;  ...
        'save_with_settings'   0   ;  ...
        'callback_on_load'     0   ;  ...
        'UserData'        struct   ;  ...
              }; parse_knownargs(varargin, pairs);
      
      %hack
      
      origString=varargin(find(strcmp('string',varargin))+1);
      
      if length(param_fullname) > length(param_name)+1,
         TooltipString = [ param_fullname(1:end-length(param_name)-1) ' : ' ...
                           param_name ' : ' TooltipString ]; %#ok<NODEF,COLND>
      else
         TooltipString = [ param_name ' : ' TooltipString ];
      end;
      
      % Default callback and default autoset_callback:
      callback         = 'generic_callback';
      autoset_callback = 'autoset_callback';
      
      %JPL
      t=ver;
      if str2double(t(find(strcmp('MATLAB',{t.Name}))).Version) < 8
          if ~isempty(type), % If we are UI, work around Matlab 7 (2004-2012a) popupmenu bug
              daddy = findobj(gcf, 'Tag', 'ContainerPanel');
              if isempty(daddy),
                  daddy = uipanel('Units', 'normalized', 'Position', [0 0 1 1], ...
                      'Tag', 'ContainerPanel');
                  set(gcf, 'ResizeFcn', @panel_resize_workaround);
              end;
          end
          
      else
          daddy=gcf;
      end
              
      
      if isempty(type), type = ''; end; % Make sure class(type) is char
      typedata = [];
      switch type,
         % All case sections must set the following variables:
         %  h;  if ~isempty(h), also
         %         gui_position;
         %  lh; if ~isempty(lh), also
         %         lbl_position; label
         %
         %
         
         % ------------- Non-UI -----------------------------------
         
       case '',
         h = []; lh = [];
         
         
         % ------------- EDIT --------------------------------------
         
       case 'edit',
         string = [];
         pairs = { ...
           'HorizontalAlignment'   'right'  ; ...
           'nlines'                     1   ; ...
                 }; parse_knownargs(varargin, pairs);
         
         [gui_position, lbl_position] = ...
             compute_position(position, labelpos, labelfraction);
         
         h  = uicontrol('Style', 'Edit', ...
                        'HorizontalAlignment', HorizontalAlignment, ...
                        'Max', nlines);
         lh = uicontrol('Style', 'text');
         
          % ------------- TEXTBOX --------------------------------------
         
       case 'textbox',
         string = [];
         pairs = { ...
           'HorizontalAlignment'   'right'  ; ...
           'nlines'                     5   ; ...
                 }; parse_knownargs(varargin, pairs);
         
         [gui_position, lbl_position] = ...
             compute_position(position, labelpos, labelfraction);
         
         h  = uicontrol('Style', 'Edit', ...
                        'HorizontalAlignment', HorizontalAlignment, ...
                        'Max', nlines);
         lh = uicontrol('Style', 'text');
                  
         
         % ------------- NUMEDIT --------------------------------------
         
       case 'numedit',
         string = [];
         pairs = { ...
           'HorizontalAlignment'   'right'  ; ...
                 }; parse_knownargs(varargin, pairs);
         
         [gui_position, lbl_position] = ...
             compute_position(position, labelpos, labelfraction);
         
         h  = uicontrol('Style', 'Edit', ...
                        'HorizontalAlignment', HorizontalAlignment);
         lh = uicontrol('Style', 'text');
         
         if ischar(value),
            if strcmp(value, 'NaN'), value = NaN; 
            else d = sscanf(value,'%g',[1 inf]); 
               if ~isnan(d), value = d; 
               else error(['numedit can only take strings that represent ' ...
                           'numbers']);
               end;
            end;
         elseif isnumeric(value) & min(size(value))==1,
            set(h, 'String', sprintf('%g ', value));
         else
            error(['numedit ui values can only be scalar numbers or ' ...
                   'strings of scalar nunbers']);
         end;
         
         
         % ------------- DISP --------------------------------------
         
       case 'disp',
         pairs = { ...
           'BackgroundColor' 0.8*[1 1 1]   ; ...
           'HorizontalAlignment'   'right'  ; ...
           'value'                     ''   ; ...
                 }; parse_knownargs(varargin, pairs);
         callback = '';
         autoset_callback = '';
         
         [gui_position, lbl_position] = ...
             compute_position(position, labelpos, labelfraction);
         
         h  = uicontrol('Style', 'Text', 'String', value, ...
                        'HorizontalAlignment', HorizontalAlignment);
         lh = uicontrol('Style', 'text');
         
         
         % ------------- HEADER --------------------------------------
       case 'header',
         pairs = { ...
           'BackgroundColor' [1 1 0.75] ; ...
           'HorizontalAlignment' 'Left' ; ...
           'value'        '' ; ...
           'FontWeight' 'bold' ; ...
           'FontSize' 12;  ...
                 }; parse_knownargs(varargin, pairs);
         callback = '';
         autoset_callback = '';
         
         gui_position = position;
         
         h = uicontrol('Style','text', 'HorizontalAlignment', HorizontalAlignment, ...
                       'BackgroundColor', BackgroundColor, 'Position', gui_position, ...
                       'FontSize', FontSize, 'FontWeight', FontWeight,...
                       'String', value);
         
         
         lh = [];
         
         % ------------- SUBHEADER --------------------------------------
       case 'subheader',
         pairs = { ...
           'BackgroundColor' [1 1 0.75] ; ...
           'HorizontalAlignment' 'center' ; ...
           'value'        '' ; ...
           'FontSize' 10;  ...
                 }; parse_knownargs(varargin, pairs);
         callback = '';
         autoset_callback = '';         
         gui_position = position;
         
         h = uicontrol('Style','text', 'HorizontalAlignment', HorizontalAlignment, ...
                       'BackgroundColor', BackgroundColor, 'Position', gui_position, ...
                       'FontSize', FontSize, ...
                       'String', value);
         
         
         lh = [];
         
         
         
         
         % ------------- MENU --------------------------------------
         
       case 'menu',
         string = [];
         pairs = { ...
           'string'                    string   ; ...
           'BackgroundColor'      [0.7 0.7 1]   ; ...
           'HorizontalAlignment'   'center' ; ...
           'value'                      1   ; ...
                 }; parse_knownargs(varargin, pairs);
         
         [gui_position, lbl_position] = ...
             compute_position(position, labelpos, labelfraction);
         
         h  = uicontrol('Style', 'PopupMenu', 'String', string, ...
                        'HorizontalAlignment', HorizontalAlignment, ...
                        'Parent', daddy);
         lh = uicontrol('Style', 'text');
         
         % dbl = str2double(string{value});
         % if isnan(dbl), value = string{value}; end;
         
         % ------------- PUSHBUTTON --------------------------------------
         
       case 'pushbutton',
         pairs = { ...
           'BackgroundColor'      [0.75 1 0.75]   ; ...
           'FontWeight'            'bold'   ; ...
           'HorizontalAlignment'   'center' ; ...
                 }; parse_knownargs(varargin, pairs);
         
         autoset_callback = '';         
         gui_position = round(position);
         
         h  = uicontrol('Style','Pushbutton', 'String', label, ...
                        'HorizontalAlignment', HorizontalAlignment, ...
                        'FontWeight', FontWeight);
         
         saveable = 0;
         lh = [];
         value = [];
         
         % -------------- SOLOTOGGLER -------------------------------------
         
       case 'solotoggler',
         pairs = { ...
           'BackgroundColor'      [0.8 0.55 0.4]  ; ...
           'ForegroundColor'      [0    0    0]   ; ...
           'HorizontalAlignment'   'center' ; ...
           'value'                      0   ; ...
           'OffString'              label   ; ...
           'OnString'               label   ; ...
           'OnFontWeight'           'bold'  ; ...
           'OffFontWeight'          'bold'  ; ...
                 }; parse_knownargs(varargin, pairs);
         
         gui_position = round(position);
         
         h  = uicontrol('Style','Pushbutton', 'String', OffString, ...
                        'HorizontalAlignment', HorizontalAlignment, ...
                        'FontWeight', OffFontWeight);
         typedata = struct('fgc', ForegroundColor, 'bgc', BackgroundColor, ...
                           'OnString', OnString, 'OffString', OffString, ...
                           'OnFontWeight', OnFontWeight, ...
                           'OffFontWeight', OffFontWeight);
         if value,
            BackgroundColor = typedata.fgc;
            ForegroundColor = typedata.bgc;
            set(h, 'String', OnString, 'FontWeight', OnFontWeight);
         end;
         
         lh = [];
         

         % -------------- LISTBOX -------------------------------------
         
       case 'listbox',
         pairs = { ...
           'BackgroundColor'      0.8*[1 1 1]  ; ...
           'ForegroundColor'      [0    0    0]   ; ...
           'HorizontalAlignment'   'center'    ; ...
           'FontName',             'Helvetica' ; ...
           'FontSize',              10         ; ...
           'value'                  1          ; ...
           'string'                 ' '        ; ...
                 }; parse_knownargs(varargin, pairs);
         
         gui_position = round(position);
         
         h  = uicontrol('Style','listbox', 'String', string, ...
                        'HorizontalAlignment', HorizontalAlignment, ...
                        'FontName', FontName, 'FontSize', FontSize);
         lh = [];
         

      % ------------- SLIDER --------------------------------------
         
       case 'slider',
         string = [];
         pairs = { ...
           'HorizontalAlignment'   'right'  ; ...
           'nlines'                     1   ; ...
           'minval'                     0   ; ...
           'maxval'                     1   ; ...
           'BackgroundColor'   0.6*[1 1 1]  ; ...
                 }; parse_knownargs(varargin, pairs);
         
         [gui_position, lbl_position] = ...
             compute_position(position, labelpos, labelfraction);
         
         h  = uicontrol('Style', 'slider', 'Min', minval, 'Max', maxval, ...
                        'HorizontalAlignment', HorizontalAlignment, ...
                        'BackgroundColor', BackgroundColor);
         lh = uicontrol('Style', 'text');
      
         

      % ------------- LOG SLIDER --------------------------------------
         
       case 'logslider',
         string = [];
         pairs = { ...
           'HorizontalAlignment'   'right'  ; ...
           'nlines'                     1   ; ...
           'minval'                     0.1 ; ...
           'maxval'                     1   ; ...
           'BackgroundColor'   0.6*[1 1 1]  ; ...
                 }; parse_knownargs(varargin, pairs);
         
         if minval<=0,
            warning(['Log slider only takes minimum values > 0; setting ' ...
                     'the min val to 0.1']);
            minval = 0.1;
         end;
         if minval >= maxval,
            error('Log slider requires maxval > minval');
         end;
         
         [gui_position, lbl_position] = ...
             compute_position(position, labelpos, labelfraction);
         
         h  = uicontrol('Style', 'slider', 'Min', minval, 'Max', maxval, ...
                        'HorizontalAlignment', HorizontalAlignment, ...
                        'BackgroundColor', BackgroundColor);
         lh = uicontrol('Style', 'text');      
         
      % ---         

          case 'saveable_nonui'
              % this case is here to allow non-UI values to be saved as
              % settings. 
              h = []; lh = [];
      
       otherwise,
         error('Don''t know that UI type');
      end;         
      % -------------- End UI Elements case-switch --------------------------
      
      if ~isempty(h),
         set(h, 'UserData',        listpos, ...
                'TooltipString',   TooltipString, ...
                'BackgroundColor', BackgroundColor, ...
                'ForegroundColor', ForegroundColor, ...
                'position',        gui_position, ...
                'callback',        callback, ...
                'ButtonDownFcn',   autoset_callback ...
                );
      end;
      if ~isempty(lh),
         set(lh, 'String',              label, ...
                 'TooltipString',       TooltipString, ...
                 'position',            lbl_position,  ...
                 'HorizontalAlignment', 'left', ...
                 'BackGroundColor', 0.6*[1 1 1]);
         if strcmp(labelpos, 'left'), 
            set(lh, 'HorizontalAlignment', 'right'); 
         end;
      end;
      
      % If passed a cell, wrap it so struct.m doesn't make a vector struct
      if iscell(value), 
          value_for_struct = {value}; 
      else
          value_for_struct = value;
      end; 
      
     % same for string
      if iscell(origString), 
          string_for_struct = {origString}; 
      else
          string_for_struct = origString;
      end; 
      
      s = struct( ...
        'param_owner',          param_owner,         ...
        'param_name',           param_name,          ...
        'param_fullname',       param_fullname,      ...
        'callback_fn',          callback_fn,         ...
        'callback_on_load',     callback_on_load,    ...
        'type',                 type,                ...
        'typedata',             typedata,            ...
        'ghandle',              h,                   ...
        'lhandle',              lh,                  ...
        'listpos',              listpos,             ...
        'autoset_string',       autoset_string,      ...
        'saveable',             saveable,            ...
        'save_with_settings',   save_with_settings,  ...
        'default_reset_value',  [],                  ...
        'UserData',             string_for_struct,   ...
        'value',                value_for_struct,    ...
        'value_history',        {{}}                 ...
        );
      s = class(s, 'SoloParam');

      % Setting values should always goes through the standard interface--
      % this one takes care of string in menus, etc. etc. The only
      % exception is numedit, which also checks its type above here,
      % because it reverts to the old value when given something
      % inappropriate. Therefore the "old" value (i.e., whatever the
      % value is before the next line of code) must already be ok.
      if ~ismember(s.type, {'pushbutton' 'header' 'subheader'}),  
         % pushbuttons, headers, and subheaders have no value
         s = subsasgn_dot_value(s, value);
      end;
   end;
   
   
% ----------------

function [gui_position, lbl_position] = ...
       compute_position(position, labelpos, labelfraction)

   lf = labelfraction;   % Shorthand for label fraction
   gf = 1-labelfraction; % Shorthand for gui fraction

   if lf<0 | lf>1,
      error('labelfraction must be a fraction within (0, 1)');
   end;
   
   switch labelpos,
    case {'' 'right'},
      gui_position = round([position(1:2) position(3)*gf-1 position(4)]);
      lbl_position = round([position(1)+position(3)*gf+1 position(2) ...
                          position(3)*lf-1 position(4)]);
      
    case 'left',
      lbl_position = round([position(1:2) position(3)*lf-1 position(4)]);
      gui_position = round([position(1)+position(3)*lf+1 position(2) ...
                          position(3)*gf-1 position(4)]);
      
    case 'top',
      gui_position = floor([position(1:3) position(4)*gf]);
      lbl_position = ceil([position(1) position(2)+position(4)*gf ...
                          position(3) position(4)*lf]);
      
    case 'bottom',
      gui_position = ceil([position(1) position(2)+position(4)*lf ...
                          position(3) position(4)*gf]);
      lbl_position = floor([position(1:3) position(4)*lf]);
      
      
    otherwise,
      error(['Sorry, don''t know how to deal with labelpos ' labelpos]);
   end;
   
   return;
   